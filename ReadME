DAGGER 2 IN Android? 

1. What is Dependency Injection?

Ans: Suppose class A is dependent on class B,  Then class B is the dependency of class A. 

Like A Car class. Lets think our car needs an engine and a wheet. So lets make the car class

class Car{
  Engine engine;
  Wheel wheel;
  
  public Car(Engine engine, Wheel wheel){
    this.engine = engine;
    this.wheel = wheel;
  
  }
  
  public void drive(){
  }
  
}


So now if we want to make a car in our main method, we have to do it like this. 

class Main{

  Engine engine = new Engine();
  WHeel wheel = new Wheel();
  
  Car car = new Car(engine, wheel);
  car.drive();

}

now the engine may have other parts dependencies to make, like cylender, block etc. So finally we have to write lots of code.
But here comes Dagger . We can simply use daggar and then out car object should look like this. 

class Main{
  CarComponent component = DaggerComponenet.create();
  Car car = component.getCar();
  car.drive();

}
Dagger will create all the necessay parts for the car ,and we dont have to do it. 


2. Add Devendency for Dagger 2 in gradle
  compile 'com.google.dagger:dagger:2.x' // current version 2.23.1
  annotationProcessor 'com.google.dagger:dagger-compiler:2.x' // current version 2.23.1

3. What is annotation processing? 
Link: https://www.youtube.com/watch?v=xswPPwYPAFM


4. DAG
=> Directed Acyclic Graph. Dagger create a graph in compile time with the annotation processor we declare in our project,
eg: @Component, @Inject . This graph is called DIrected Acyclic Graph. From this the name Dagger came. 


*** Must Read https://www.vogella.com/tutorials/Dagger/article.html

---------------------------------------------------------------------------------------------

=>  We Can @Inject in 3 places 
  1. Constructor
  2. Fiels
  3. Methods
If Contructor Injected then Fields and Methods automatically Injected

* We cant Inject Activity, Thats why for Field injection we have pass a referance to Component of the activity
 void inject(MainActivity activity);

---------------------------------------------------------------------------------------------------
=> @Module & @Provides & @Binds: 
  When we dont own a class, then we cant @inject in that class. For this we need @Module. We need to create a class and put 
  @Module annotation. Then we can set function to provide the necessary object by adding @Provides annotation 

Ex: 
@Module
public class MyModule{
  @Provides
  MyObject provideMyOBject(MyObject myObject){
      return myObject;
  }

  // we can make this function static if it is not dependent with any other class variable
  
  @Provides
  static MyOBject provideMyObject(MyObject myObject){
      return myObject
  }
}

Alos we can use @Binds if we just need the object
@Module
public abstract class MyModule{
  @Binds
  abstract MyObject bindMyOBject(MyObject myObject);
} 

-----------------------------------------------------------------------------

PASSING VALUES AT RUNTIME

IF we want to pass value we can do this:

class MyClass{

  int value;
  
  public MyClass(int value){
    this.value = valjue;
  }
  
}

in the MyClassModule we have to do like this

@Module
class MyClassModule{
  privaye int value;
  
  public MyClassModule(int value){
    this.value = value
  }
  
  @Provides
  MyClass provideMyClass(){
      return new MyClass(value);
  }

}
  // or we can do this with providing the value. then we need to change/add below code in module
  @Provides
  int provideValue(){
      return value
  }

  @Provides
  MyClass provideMyCLass(MyClass myclass){
      return myclass;
  }

And in the MainActivity  we have to initialize DaggerComponent like this

DaggerCarComponent.builder().diselEngineModule(new DiselEngineModule(100)).build();

ALso we can achive this in more conveninent way.  for this we have to create are own Component Builder interface

@Component(modules = MyClassModule) 
public interface MyComponent{
  
  @Component.Builder
  interface Builder{
    
    @BindsInstance
    Builder value(int value);
    
    MyCOmponent build();
  
  
  }
  
}

and declare dagger like this

DaggerCarComponent.builder().value(100).build();

But if we have different int value in MyClass . then dagger dont know which value is which. Then we have to use @Named annotation

@Component(modules = @MyCLassModule)
public interface MyCOmponent{
  
  @Component.Builder
  public Builder{
    
    @BindsInstance
    Builder valueOne(@Named("value one") int value);
    
    @BindsInstance
    Builder valueTwo(@Named("value tow") int valueTwo);
    
    MyComponent build();
  
  }

}

and in dagger instance 

DaggerCarComponent.builder().valueOne(100).valueTwo(200).build();

and in MyCLass class we have to initialize the constructor like this

public MyClass(@Named("value one") int valueOne, @Named("value tow") int valueTwo){
    this.valueOne = valueOne;
    this.valueTwo = valueTow;
}














